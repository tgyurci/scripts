#!/bin/sh

# gpg-edit: Decrypts a GnuPG-encrypted file, executes $EDITOR with the
# decrypted file and re-encrypts the edited data.

set -eu

err() {
	echo "gpg-edit:" "error": "$@" >&2
	exit 1
}

debug() {
	if [ -n "${DEBUG:-}" ]; then
		echo "gpg-edit:" "$@" >&2
	fi
}

matches() {
	# shellcheck disable=SC2254
	case "$1" in
		($2) return 0 ;;
	esac

	return 1
}

gpg_cmd() {
	gpg --quiet --no-verbose --batch --lock-once "$@"
}

file_sha256() {
	gpg_cmd --print-md SHA256 < "$1" | tr -d ' '
}

cleanup() {
	if [ -n "$tmpdir" ]; then
		debug "Cleaning up: $tmpdir"
		rm -rf -- "$tmpdir"
	fi
}

usage() {
	err "Usage: $0 [-s] [-u local_user ...] [-r recipient ...] file.gpg|file.asc"
}

force=""
sign=""
recipients=""
local_users=""
while getopts :fsr:u: opt; do
	case "$opt" in
		f) force="yes" ;;
		s) sign="yes" ;;
		r) recipients="$recipients --recipient $OPTARG" ;;
		r) local_users="$local_users --local-user $OPTARG" ;;
		\?) usage ;;
	esac
done

shift $(($OPTIND - 1))

[ "$#" = 1 ] || usage

encfile="$1"
basefile=""

if matches "$encfile" "*.gpg"; then
	basefile="$(basename "${encfile%%.gpg}")"
elif matches "$encfile" "*.asc"; then
	basefile="$(basename "${encfile%%.asc}")"
else
	err "$encfile must end with .gpg or .asc"
fi

debug "Encrypted file:" "$encfile"
debug "Base filename:" "$basefile"

tmpdir=""
trap "cleanup; trap - EXIT" HUP INT TERM EXIT
tmpdir="$(mktemp -d -t gpg-edit)"
tmpfile="${tmpdir}/${basefile}"

if [ -f "$encfile" ]; then
	if [ -z "$recipients" ]; then
		debug "Getting recipients from $encfile"
		enc_recipients="$(gpg_cmd --decrypt --list-only --status-fd 1 "$encfile" |
			grep '^\[GNUPG:\] ENC_TO ' | cut -d " " -f 3)"

		for enc_recipient in $enc_recipients; do
			recipient="$(gpg_cmd --list-keys --with-colons "$enc_recipient" |
				grep '^pub:' | cut -d ":" -f 5)"
			debug "Adding existing recipient: $recipient"
			recipients="$recipients --recipient $recipient"
		done
	fi

	debug "Decrypting $encfile to $tmpfile"
	gpg_cmd --decrypt --output "$tmpfile" "$encfile"
	original_hash="$(file_sha256 "$tmpfile")"
	debug "Hash for original file: $original_hash"
else
	original_hash=""
fi

debug "Waiting for editor: $tmpfile"
if ${EDITOR:-"vi"} "$tmpfile"; then
	:
else
	res="$?"
	debug "Editor exited with code $res, aborting"
	exit "$res"
fi

if [ -f "$tmpfile" ]; then
	new_hash="$(file_sha256 "$tmpfile")"
	debug "Hash for edited file: $new_hash"
else
	err "Tempfile does not exist, aborting: $tmpfile"
fi

if [ "$original_hash" !=  "$new_hash" ] || [ -n "$force" ]; then
	debug "Original and new file differ or force is set, re-encrypting"

	gpg_cmd --yes --encrypt --armor ${sign:+"--sign"} ${local_users} ${recipients} --output "$encfile" "$tmpfile"
fi
